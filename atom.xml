<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://maodou38.github.io</id>
    <title>小丁的blog</title>
    <updated>2020-03-21T09:51:11.242Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://maodou38.github.io"/>
    <link rel="self" href="https://maodou38.github.io/atom.xml"/>
    <logo>https://maodou38.github.io/images/avatar.png</logo>
    <icon>https://maodou38.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 小丁的blog</rights>
    <entry>
        <title type="html"><![CDATA[Docker常用命令]]></title>
        <id>https://maodou38.github.io/post/docker-chang-yong-ming-ling/</id>
        <link href="https://maodou38.github.io/post/docker-chang-yong-ming-ling/">
        </link>
        <updated>2020-03-21T09:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>#查看 Docker 版本<br>
<code>docker version</code></p>
<p>#从 Docker 文件构建 Docker 映像<br>
<code>docker build -t image-name docker-file-location</code></p>
<p>#运行 Docker 映像<br>
<code>docker run -d image-name</code></p>
<p>#查看可用的 Docker 映像<br>
<code>docker images</code></p>
<p>#查看最近的运行容器<br>
<code>docker ps -l</code></p>
<p>#查看所有正在运行的容器<br>
<code>docker ps -a</code></p>
<p>#停止运行容器<br>
<code>docker stop container_id</code></p>
<p>#删除一个镜像<br>
<code>docker rmi image-name</code></p>
<p>#删除所有镜像<br>
<code>docker rmi $(docker images -q)</code></p>
<p>#强制删除所有镜像<br>
<code>docker rmi -r $(docker images -q)</code></p>
<p>#删除所有虚悬镜像<br>
<code>docker rmi $(docker images -q -f dangling=true)</code></p>
<p>#删除所有容器<br>
<code>docker rm $(docker ps -a -q)</code></p>
<p>#进入 Docker 容器<br>
<code>docker exec -it container-id /bin/bash</code></p>
<p>#查看所有数据卷<br>
<code>docker volume ls</code></p>
<p>#删除指定数据卷<br>
<code>docker volume rm [volume_name]</code></p>
<p>#删除所有未关联的数据卷<br>
<code>docker volume rm $(docker volume ls -qf dangling=true)</code></p>
<p>#从主机复制文件到容器<br>
<code>sudo docker cp host_path containerID:container_path</code></p>
<p>#从容器复制文件到主机<br>
<code>sudo docker cp containerID:container_path host_path</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker常用命令]]></title>
        <id>https://maodou38.github.io/post/docker-code/</id>
        <link href="https://maodou38.github.io/post/docker-code/">
        </link>
        <updated>2020-03-21T09:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>#查看 Docker 版本<br>
<code>docker version</code></p>
<p>#从 Docker 文件构建 Docker 映像<br>
<code>docker build -t image-name docker-file-location</code></p>
<p>#运行 Docker 映像<br>
<code>docker run -d image-name</code></p>
<p>#查看可用的 Docker 映像<br>
<code>docker images</code></p>
<p>#查看最近的运行容器<br>
<code>docker ps -l</code></p>
<p>#查看所有正在运行的容器<br>
<code>docker ps -a</code></p>
<p>#停止运行容器<br>
<code>docker stop container_id</code></p>
<p>#删除一个镜像<br>
<code>docker rmi image-name</code></p>
<p>#删除所有镜像<br>
<code>docker rmi $(docker images -q)</code></p>
<p>#强制删除所有镜像<br>
<code>docker rmi -r $(docker images -q)</code></p>
<p>#删除所有虚悬镜像<br>
<code>docker rmi $(docker images -q -f dangling=true)</code></p>
<p>#删除所有容器<br>
<code>docker rm $(docker ps -a -q)</code></p>
<p>#进入 Docker 容器<br>
<code>docker exec -it container-id /bin/bash</code></p>
<p>#查看所有数据卷<br>
<code>docker volume ls</code></p>
<p>#删除指定数据卷<br>
<code>docker volume rm [volume_name]</code></p>
<p>#删除所有未关联的数据卷<br>
<code>docker volume rm $(docker volume ls -qf dangling=true)</code></p>
<p>#从主机复制文件到容器<br>
<code>sudo docker cp host_path containerID:container_path</code></p>
<p>#从容器复制文件到主机<br>
<code>sudo docker cp containerID:container_path host_path</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于 Docker 安装 GitLab Runner及使用]]></title>
        <id>https://maodou38.github.io/post/gitlab-runner/</id>
        <link href="https://maodou38.github.io/post/gitlab-runner/">
        </link>
        <updated>2020-03-21T08:31:59.000Z</updated>
        <content type="html"><![CDATA[<p>#基于 Docker 安装 GitLab Runner</p>
<h2 id="环境准备">环境准备</h2>
<ul>
<li>创建工作目录 /usr/local/docker/runner</li>
<li>创建构建目录 /usr/local/docker/runner/environment</li>
<li>下载 jdk-8u152-linux-x64.tar.gz 并复制到 /usr/local/docker/runner/environment</li>
<li>下载 apache-maven-3.5.3-bin.tar.gz 并复制到 /usr/local/docker/runner/environment</li>
</ul>
<p>##daemon.json<br>
在 /usr/local/docker/runner/environment 目录下创建 daemon.json，用于配置加速器和仓库地址</p>
<pre><code class="language-json">{
  &quot;registry-mirrors&quot;: [
    &quot;https://registry.docker-cn.com&quot;
  ],
  &quot;insecure-registries&quot;: [
    &quot;192.168.10.133:5000&quot;
  ]
}
</code></pre>
<p>##Dockerfile<br>
在 /usr/local/docker/runner/environment 目录下创建 Dockerfile</p>
<pre><code class="language-dockerfile">FROM gitlab/gitlab-runner
MAINTAINER maodou38 &lt;maodoulove19950815@vip.qq.com&gt;

# 修改软件源
RUN echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse' &gt; /etc/apt/sources.list &amp;&amp; \
    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse' &gt;&gt; /etc/apt/sources.list &amp;&amp; \
    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse' &gt;&gt; /etc/apt/sources.list &amp;&amp; \
    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse' &gt;&gt; /etc/apt/sources.list &amp;&amp; \
    apt-get update -y &amp;&amp; \
    apt-get clean

# 安装 Docker
RUN apt-get -y install apt-transport-https ca-certificates curl software-properties-common &amp;&amp; \
    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add - &amp;&amp; \
    add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; &amp;&amp; \
    apt-get update -y &amp;&amp; \
    apt-get install -y docker-ce
COPY daemon.json /etc/docker/daemon.json

# 安装 Docker Compose
WORKDIR /usr/local/bin
RUN wget https://raw.githubusercontent.com/topsale/resources/master/docker/docker-compose
RUN chmod +x docker-compose

# 安装 Java
RUN mkdir -p /usr/local/java
WORKDIR /usr/local/java
COPY jdk-8u152-linux-x64.tar.gz /usr/local/java
RUN tar -zxvf jdk-8u152-linux-x64.tar.gz &amp;&amp; \
    rm -fr jdk-8u152-linux-x64.tar.gz

# 安装 Maven
RUN mkdir -p /usr/local/maven
WORKDIR /usr/local/maven
# RUN wget https://raw.githubusercontent.com/topsale/resources/master/maven/apache-maven-3.5.3-bin.tar.gz
COPY apache-maven-3.5.3-bin.tar.gz /usr/local/maven
RUN tar -zxvf apache-maven-3.5.3-bin.tar.gz &amp;&amp; \
    rm -fr apache-maven-3.5.3-bin.tar.gz
# COPY settings.xml /usr/local/maven/apache-maven-3.5.3/conf/settings.xml

# 配置环境变量
ENV JAVA_HOME /usr/local/java/jdk1.8.0_152
ENV MAVEN_HOME /usr/local/maven/apache-maven-3.5.3
ENV PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin

WORKDIR /
</code></pre>
<p>##docker-compose.yml<br>
在 /usr/local/docker/runner 目录下创建 docker-compose.yml</p>
<pre><code class="language-docker-compse">version: '3.1'
services:
  gitlab-runner:
    build: environment
    restart: always
    container_name: gitlab-runner
    privileged: true
    volumes:
      - ./config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
</code></pre>
<p>##注册 Runner</p>
<pre><code class="language-docker">docker exec -it gitlab-runner gitlab-runner register

# 输入 GitLab 地址
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://192.168.10.132/

# 输入 GitLab Token
Please enter the gitlab-ci token for this runner:
1Lxq_f1NRfCfeNbE5WRh

# 输入 Runner 的说明
Please enter the gitlab-ci description for this runner:
可以为空

# 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci
Please enter the gitlab-ci tags for this runner (comma separated):
deploy

# 这里选择 true ，可以用于代码上传后直接执行
Whether to run untagged builds [true/false]:
true

# 这里选择 false，可以直接回车，默认为 false
Whether to lock Runner to current project [true/false]:
false

# 选择 runner 执行器，这里我们选择的是 shell
Please enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:
shell
</code></pre>
<p>#使用 Runner</p>
<p>##GitLab CI 地址与令牌参数<br>
项目 –&gt; 设置 –&gt; CI/CD –&gt; Runner 设置<br>
<img src="https://maodou38.github.io/post-images/1584780166690.png" alt="" loading="lazy"></p>
<p>##.gitlab-ci.yml<br>
在项目工程下编写 .gitlab-ci.yml 配置文件：</p>
<pre><code>stages:
  - install_deps
  - test
  - build
  - deploy_test
  - deploy_production

cache:
  key: ${CI_BUILD_REF_NAME}
  paths:
    - node_modules/
    - dist/

# 安装依赖
install_deps:
  stage: install_deps
  only:
    - develop
    - master
  script:
    - npm install

# 运行测试用例
test:
  stage: test
  only:
    - develop
    - master
  script:
    - npm run test

# 编译
build:
  stage: build
  only:
    - develop
    - master
  script:
    - npm run clean
    - npm run build:client
    - npm run build:server

# 部署测试服务器
deploy_test:
  stage: deploy_test
  only:
    - develop
  script:
    - pm2 delete app || true
    - pm2 start app.js --name app

# 部署生产服务器
deploy_production:
  stage: deploy_production
  only:
    - master
  script:
    - bash scripts/deploy/deploy.sh
</code></pre>
<p>上面的配置把一次 Pipeline 分成五个阶段：</p>
<ul>
<li>安装依赖(install_deps)</li>
<li>运行测试(test)</li>
<li>编译(build)</li>
<li>部署测试服务器(deploy_test)</li>
<li>部署生产服务器(deploy_production)</li>
</ul>
<p>注意： 设置 Job.only 后，只有当 develop 分支和 master 分支有提交的时候才会触发相关的 Jobs。<br>
节点说明：</p>
<ul>
<li>stages：定义构建阶段，这里只有一个阶段 deploy</li>
<li>deploy：构建阶段 deploy 的详细配置也就是任务配置</li>
<li>script：需要执行的 shell 脚本</li>
<li>only：这里的 master 指在提交到 master 时执行</li>
<li>tags：与注册 runner 时的 tag 匹配</li>
</ul>
<p>#其它命令</p>
<ul>
<li>删除注册信息<br>
<code>gitlab-ci-multi-runner unregister --name &quot;名称&quot;</code><br>
*查看注册列表<br>
<code>gitlab-ci-multi-runner list</code></li>
</ul>
<p>#Dockerfile示例</p>
<pre><code>    FROM openjdk:8-jre

MAINTAINER maodou38 &lt;maodoulove19950815@vip.qq.com&gt;

ENV APP_VERSION 1.0.0-SNAPSHOT
ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    &amp;&amp; tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

RUN mkdir /app

COPY myshop-service-user-provider-$APP_VERSION.jar /app/app.jar
ENTRYPOINT [&quot;dockerize&quot;, &quot;-timeout&quot;, &quot;5m&quot;, &quot;-wait&quot;, &quot;tcp://192.168.10.131:3306&quot;, &quot;java&quot;, &quot;-Djava.security.egd=file:/dev/./urandom&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;]

EXPOSE 8501
</code></pre>
<ul>
<li>DOCKERIZE是一个监听插件，监听依赖服务是否启动</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[centos 安装docker及docker-compose]]></title>
        <id>https://maodou38.github.io/post/docker-install/</id>
        <link href="https://maodou38.github.io/post/docker-install/">
        </link>
        <updated>2020-03-21T07:48:52.000Z</updated>
        <content type="html"><![CDATA[<p>#Docker安装</p>
<p>##1.删除已安装的Docker</p>
<pre><code class="language-bash">    sudo yum remove docker \\
                     docker-client \\
                     docker-client-latest \\
                     docker-common \\
                     docker-latest \\
                     docker-latest-logrotate \\
                     docker-logrotate \\
                     docker-selinux \\
                     docker-engine-selinux \\
                     docker-engine
</code></pre>
<p>##2.配置阿里云Docker Yum源</p>
<pre><code class="language-bash"> sudo yum install -y yum-utils device-mapper-persistent-data lvm2
 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre>
<p>##3.安装指定版本<br>
<code>bash yum list docker-ce --showduplicates</code><br>
###3.1、安装较旧版本</p>
<pre><code class="language-bash">      //注意：需要指定完整的rpm包的包名，并且加上--setopt=obsoletes=0 参数：
   yum install -y --setopt=obsoletes=0 \
  docker-ce-17.03.2.ce-1.el7.centos.x86_64 \
  docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch
  ```
###3.2、安装Docker最新版本
```bash
sudo yum install docker-ce
</code></pre>
<p>##4.启用阿里云Docker镜像加速<br>
https://cr.console.aliyun.com 自己申请账号，下面是我自己的</p>
<pre><code class="language-bash">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-shanghai.aliyuncs.com/ding_docker_registry/ding_docker_registry&quot;]
}
EOF
</code></pre>
<p>##5.启动Docker服务</p>
<pre><code class="language-bash">systemctl enable docker
systemctl start docker
</code></pre>
<p>#Docker 用户组设置</p>
<p>##1.创建docker用户组（正常来说docker安装后会自动有docker用户组）</p>
<pre><code class="language-bash">sudo groupadd docker
</code></pre>
<p>##2.两步选一步<br>
###2.1将当前用户添加进组</p>
<pre><code class="language-bash">sudo gpasswd -a ${USER} docker
</code></pre>
<p>###2.2添加指定用户进组</p>
<pre><code class="language-bash">sudo usermod  -aG docker ${用户名}
</code></pre>
<p>##3.重启docker</p>
<pre><code class="language-bash">sudo systemctl restart docker
</code></pre>
<p>#Docker-compose安装(建议使用方法一)<br>
##方法一：源码安装</p>
<pre><code class="language-bash">#自己在https://github.com/docker/compose/releases查看版本替换下面链接的版本号
curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose

#验证
docker-compose --version
</code></pre>
<p>##方法二：pip安装</p>
<pre><code class="language-bash">###安装python-pip
yum -y install epel-release
yum -y install python-pip   #若后续安装docker-compose失败，使用 yum -y install python3-pip
pip install --upgrade pip
</code></pre>
<p>###安装docker-compose</p>
<pre><code class="language-bash">#若安装的是python-pip3,则此处命令为pip3 install docker-compose
pip install docker-compose 

#验证
docker-compose version
</code></pre>
]]></content>
    </entry>
</feed>